{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "#used to make plots of our data\n",
    "import matplotlib\n",
    "\n",
    "#we'll use this library to do some basic arithmetic \n",
    "import numpy as np\n",
    "\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#defining a variable to read a csv file from the web\n",
    "twitter_data = pd.read_csv(\"http://real-chart.finance.yahoo.com/table.csv?s=TWTR&d=6&e=3&f=2015&g=d&a=10&b=7&c=2013&ignore=.csv\", header=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date       Open       High        Low      Close    Volume  Adj Close\n",
      "0  2015-07-02  35.400002  35.970001  35.099998  35.720001  17589400  35.720001\n",
      "1  2015-07-01  36.049999  36.110001  35.240002  35.400002  23624800  35.400002\n",
      "2  2015-06-30  34.500000  36.419998  34.439999  36.220001  25979100  36.220001\n",
      "3  2015-06-29  34.470001  35.090000  34.150002  34.209999  25139700  34.209999\n",
      "4  2015-06-26  34.970001  35.330002  34.669998  35.259998  16900000  35.259998\n"
     ]
    }
   ],
   "source": [
    "#printing the first five rows, including the header columns\n",
    "print twitter_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Date       Open       High        Low      Close     Volume  \\\n",
      "410  2013-11-13  41.029999  42.869999  40.759998  42.599998    8688300   \n",
      "411  2013-11-12  43.660000  43.779999  41.830002  41.900002    6316700   \n",
      "412  2013-11-11  40.500000  43.000000  39.400002  42.900002   16113900   \n",
      "413  2013-11-08  45.930000  46.939999  40.689999  41.650002   27925300   \n",
      "414  2013-11-07  45.099998  50.090000  44.000000  44.900002  117701600   \n",
      "\n",
      "     Adj Close  \n",
      "410  42.599998  \n",
      "411  41.900002  \n",
      "412  42.900002  \n",
      "413  41.650002  \n",
      "414  44.900002  \n"
     ]
    }
   ],
   "source": [
    "#we can also view the last five rows\n",
    "print twitter_data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Date       Open       High        Low      Close     Volume  \\\n",
      "0    2015-07-02  35.400002  35.970001  35.099998  35.720001   17589400   \n",
      "1    2015-07-01  36.049999  36.110001  35.240002  35.400002   23624800   \n",
      "2    2015-06-30  34.500000  36.419998  34.439999  36.220001   25979100   \n",
      "3    2015-06-29  34.470001  35.090000  34.150002  34.209999   25139700   \n",
      "4    2015-06-26  34.970001  35.330002  34.669998  35.259998   16900000   \n",
      "5    2015-06-25  35.360001  35.360001  34.970001  35.169998   10689900   \n",
      "6    2015-06-24  35.400002  35.750000  35.099998  35.169998   12959800   \n",
      "7    2015-06-23  35.779999  36.200001  34.959999  35.369999   24814600   \n",
      "8    2015-06-22  35.950001  36.000000  35.340000  35.549999   21293500   \n",
      "9    2015-06-19  34.970001  36.279999  34.849998  35.860001   32923200   \n",
      "10   2015-06-18  34.630001  35.040001  34.450001  34.660000   19385800   \n",
      "11   2015-06-17  34.990002  35.119999  34.169998  34.689999   27138000   \n",
      "12   2015-06-16  34.230000  35.200001  33.509998  34.820000   49591200   \n",
      "13   2015-06-15  35.240002  35.259998  34.310001  34.669998   32711500   \n",
      "14   2015-06-12  36.900002  37.250000  35.549999  35.900002   60739800   \n",
      "15   2015-06-11  35.919998  36.169998  35.790001  35.840000   11090800   \n",
      "16   2015-06-10  36.009998  36.169998  35.599998  35.849998   12611800   \n",
      "17   2015-06-09  36.500000  36.500000  35.570000  35.880001   13978300   \n",
      "18   2015-06-08  36.910000  36.980000  36.410000  36.459999   11718100   \n",
      "19   2015-06-05  36.790001  37.230000  36.650002  37.000000   11658700   \n",
      "20   2015-06-04  37.169998  37.790001  36.509998  36.709999   23660000   \n",
      "21   2015-06-03  36.509998  37.169998  36.480000  37.000000   13806600   \n",
      "22   2015-06-02  36.450001  36.599998  36.160000  36.400002   13078400   \n",
      "23   2015-06-01  36.689999  36.830002  36.430000  36.630001    9947200   \n",
      "24   2015-05-29  37.049999  37.070000  36.529999  36.669998   16515400   \n",
      "25   2015-05-28  36.490002  37.330002  36.369999  36.830002   17858900   \n",
      "26   2015-05-27  36.500000  36.650002  36.099998  36.410000   14444300   \n",
      "27   2015-05-26  36.669998  36.830002  36.369999  36.509998   13026500   \n",
      "28   2015-05-22  36.700001  36.980000  36.570000  36.599998    9808800   \n",
      "29   2015-05-21  36.810001  36.939999  36.389999  36.680000   17413500   \n",
      "..          ...        ...        ...        ...        ...        ...   \n",
      "385  2013-12-19  55.080002  57.750000  55.000000  57.490002   13152500   \n",
      "386  2013-12-18  57.000000  57.000000  54.230000  55.509998   16659800   \n",
      "387  2013-12-17  56.970001  57.380001  54.619999  56.450001   22115200   \n",
      "388  2013-12-16  57.860001  60.240002  55.759998  56.610001   39310800   \n",
      "389  2013-12-13  56.200001  59.410000  55.450001  59.000000   38979600   \n",
      "390  2013-12-12  52.200001  55.869999  50.689999  55.330002   23446900   \n",
      "391  2013-12-11  52.400002  53.869999  51.000000  52.340000   26631500   \n",
      "392  2013-12-10  48.900002  52.580002  48.700001  51.990002   25792000   \n",
      "393  2013-12-09  45.590000  49.840000  45.020000  49.139999   17366600   \n",
      "394  2013-12-06  45.750000  45.799999  44.540001  44.950001    6230000   \n",
      "395  2013-12-05  43.450001  46.349998  42.830002  45.619999   11729400   \n",
      "396  2013-12-04  41.270000  43.919998  41.270000  43.689999   11014900   \n",
      "397  2013-12-03  40.689999  41.599998  40.540001  41.369999    5771000   \n",
      "398  2013-12-02  41.790001  42.000000  40.400002  40.779999    6424300   \n",
      "399  2013-11-29  41.400002  41.580002  40.900002  41.570000    4107000   \n",
      "400  2013-11-27  40.470001  41.400002  40.349998  40.900002    5536300   \n",
      "401  2013-11-26  39.160000  40.549999  38.919998  40.180000    9828400   \n",
      "402  2013-11-25  41.080002  41.139999  38.799999  39.060001   14333300   \n",
      "403  2013-11-22  41.810001  42.279999  40.970001  41.000000    6185200   \n",
      "404  2013-11-21  41.250000  42.490002  40.369999  42.060001    8324700   \n",
      "405  2013-11-20  41.400002  41.750000  40.509998  41.049999    5767300   \n",
      "406  2013-11-19  41.389999  41.900002  40.000000  41.750000    7436600   \n",
      "407  2013-11-18  43.500000  43.950001  40.849998  41.139999   12810600   \n",
      "408  2013-11-15  45.250000  45.270000  43.430000  43.980000    8010600   \n",
      "409  2013-11-14  42.340000  45.669998  42.240002  44.689999   11099400   \n",
      "410  2013-11-13  41.029999  42.869999  40.759998  42.599998    8688300   \n",
      "411  2013-11-12  43.660000  43.779999  41.830002  41.900002    6316700   \n",
      "412  2013-11-11  40.500000  43.000000  39.400002  42.900002   16113900   \n",
      "413  2013-11-08  45.930000  46.939999  40.689999  41.650002   27925300   \n",
      "414  2013-11-07  45.099998  50.090000  44.000000  44.900002  117701600   \n",
      "\n",
      "     Adj Close  \n",
      "0    35.720001  \n",
      "1    35.400002  \n",
      "2    36.220001  \n",
      "3    34.209999  \n",
      "4    35.259998  \n",
      "5    35.169998  \n",
      "6    35.169998  \n",
      "7    35.369999  \n",
      "8    35.549999  \n",
      "9    35.860001  \n",
      "10   34.660000  \n",
      "11   34.689999  \n",
      "12   34.820000  \n",
      "13   34.669998  \n",
      "14   35.900002  \n",
      "15   35.840000  \n",
      "16   35.849998  \n",
      "17   35.880001  \n",
      "18   36.459999  \n",
      "19   37.000000  \n",
      "20   36.709999  \n",
      "21   37.000000  \n",
      "22   36.400002  \n",
      "23   36.630001  \n",
      "24   36.669998  \n",
      "25   36.830002  \n",
      "26   36.410000  \n",
      "27   36.509998  \n",
      "28   36.599998  \n",
      "29   36.680000  \n",
      "..         ...  \n",
      "385  57.490002  \n",
      "386  55.509998  \n",
      "387  56.450001  \n",
      "388  56.610001  \n",
      "389  59.000000  \n",
      "390  55.330002  \n",
      "391  52.340000  \n",
      "392  51.990002  \n",
      "393  49.139999  \n",
      "394  44.950001  \n",
      "395  45.619999  \n",
      "396  43.689999  \n",
      "397  41.369999  \n",
      "398  40.779999  \n",
      "399  41.570000  \n",
      "400  40.900002  \n",
      "401  40.180000  \n",
      "402  39.060001  \n",
      "403  41.000000  \n",
      "404  42.060001  \n",
      "405  41.049999  \n",
      "406  41.750000  \n",
      "407  41.139999  \n",
      "408  43.980000  \n",
      "409  44.689999  \n",
      "410  42.599998  \n",
      "411  41.900002  \n",
      "412  42.900002  \n",
      "413  41.650002  \n",
      "414  44.900002  \n",
      "\n",
      "[415 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "print twitter_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Date       Open       High        Low      Close    Volume  \\\n",
      "0   2015-07-02  35.400002  35.970001  35.099998  35.720001  17589400   \n",
      "1   2015-07-01  36.049999  36.110001  35.240002  35.400002  23624800   \n",
      "2   2015-06-30  34.500000  36.419998  34.439999  36.220001  25979100   \n",
      "3   2015-06-29  34.470001  35.090000  34.150002  34.209999  25139700   \n",
      "4   2015-06-26  34.970001  35.330002  34.669998  35.259998  16900000   \n",
      "5   2015-06-25  35.360001  35.360001  34.970001  35.169998  10689900   \n",
      "6   2015-06-24  35.400002  35.750000  35.099998  35.169998  12959800   \n",
      "7   2015-06-23  35.779999  36.200001  34.959999  35.369999  24814600   \n",
      "8   2015-06-22  35.950001  36.000000  35.340000  35.549999  21293500   \n",
      "9   2015-06-19  34.970001  36.279999  34.849998  35.860001  32923200   \n",
      "10  2015-06-18  34.630001  35.040001  34.450001  34.660000  19385800   \n",
      "11  2015-06-17  34.990002  35.119999  34.169998  34.689999  27138000   \n",
      "12  2015-06-16  34.230000  35.200001  33.509998  34.820000  49591200   \n",
      "13  2015-06-15  35.240002  35.259998  34.310001  34.669998  32711500   \n",
      "14  2015-06-12  36.900002  37.250000  35.549999  35.900002  60739800   \n",
      "15  2015-06-11  35.919998  36.169998  35.790001  35.840000  11090800   \n",
      "16  2015-06-10  36.009998  36.169998  35.599998  35.849998  12611800   \n",
      "17  2015-06-09  36.500000  36.500000  35.570000  35.880001  13978300   \n",
      "18  2015-06-08  36.910000  36.980000  36.410000  36.459999  11718100   \n",
      "19  2015-06-05  36.790001  37.230000  36.650002  37.000000  11658700   \n",
      "\n",
      "    Adj Close  \n",
      "0   35.720001  \n",
      "1   35.400002  \n",
      "2   36.220001  \n",
      "3   34.209999  \n",
      "4   35.259998  \n",
      "5   35.169998  \n",
      "6   35.169998  \n",
      "7   35.369999  \n",
      "8   35.549999  \n",
      "9   35.860001  \n",
      "10  34.660000  \n",
      "11  34.689999  \n",
      "12  34.820000  \n",
      "13  34.669998  \n",
      "14  35.900002  \n",
      "15  35.840000  \n",
      "16  35.849998  \n",
      "17  35.880001  \n",
      "18  36.459999  \n",
      "19  37.000000  \n"
     ]
    }
   ],
   "source": [
    "snapshot = twitter_data.head(20)\n",
    "print snapshot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     False\n",
       "1      True\n",
       "2      True\n",
       "3     False\n",
       "4     False\n",
       "5     False\n",
       "6     False\n",
       "7      True\n",
       "8     False\n",
       "9      True\n",
       "10    False\n",
       "11    False\n",
       "12    False\n",
       "13    False\n",
       "14     True\n",
       "15     True\n",
       "16     True\n",
       "17     True\n",
       "18     True\n",
       "19     True\n",
       "Name: High, dtype: bool"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this will return boolean values, which are not descriptive enough for our analysis\n",
    "snapshot[\"High\"] > 36 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1 </th>\n",
       "      <td> 2015-07-01</td>\n",
       "      <td> 36.049999</td>\n",
       "      <td> 36.110001</td>\n",
       "      <td> 35.240002</td>\n",
       "      <td> 35.400002</td>\n",
       "      <td> 23624800</td>\n",
       "      <td> 35.400002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2 </th>\n",
       "      <td> 2015-06-30</td>\n",
       "      <td> 34.500000</td>\n",
       "      <td> 36.419998</td>\n",
       "      <td> 34.439999</td>\n",
       "      <td> 36.220001</td>\n",
       "      <td> 25979100</td>\n",
       "      <td> 36.220001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7 </th>\n",
       "      <td> 2015-06-23</td>\n",
       "      <td> 35.779999</td>\n",
       "      <td> 36.200001</td>\n",
       "      <td> 34.959999</td>\n",
       "      <td> 35.369999</td>\n",
       "      <td> 24814600</td>\n",
       "      <td> 35.369999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9 </th>\n",
       "      <td> 2015-06-19</td>\n",
       "      <td> 34.970001</td>\n",
       "      <td> 36.279999</td>\n",
       "      <td> 34.849998</td>\n",
       "      <td> 35.860001</td>\n",
       "      <td> 32923200</td>\n",
       "      <td> 35.860001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td> 2015-06-12</td>\n",
       "      <td> 36.900002</td>\n",
       "      <td> 37.250000</td>\n",
       "      <td> 35.549999</td>\n",
       "      <td> 35.900002</td>\n",
       "      <td> 60739800</td>\n",
       "      <td> 35.900002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td> 2015-06-11</td>\n",
       "      <td> 35.919998</td>\n",
       "      <td> 36.169998</td>\n",
       "      <td> 35.790001</td>\n",
       "      <td> 35.840000</td>\n",
       "      <td> 11090800</td>\n",
       "      <td> 35.840000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td> 2015-06-10</td>\n",
       "      <td> 36.009998</td>\n",
       "      <td> 36.169998</td>\n",
       "      <td> 35.599998</td>\n",
       "      <td> 35.849998</td>\n",
       "      <td> 12611800</td>\n",
       "      <td> 35.849998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td> 2015-06-09</td>\n",
       "      <td> 36.500000</td>\n",
       "      <td> 36.500000</td>\n",
       "      <td> 35.570000</td>\n",
       "      <td> 35.880001</td>\n",
       "      <td> 13978300</td>\n",
       "      <td> 35.880001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td> 2015-06-08</td>\n",
       "      <td> 36.910000</td>\n",
       "      <td> 36.980000</td>\n",
       "      <td> 36.410000</td>\n",
       "      <td> 36.459999</td>\n",
       "      <td> 11718100</td>\n",
       "      <td> 36.459999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td> 2015-06-05</td>\n",
       "      <td> 36.790001</td>\n",
       "      <td> 37.230000</td>\n",
       "      <td> 36.650002</td>\n",
       "      <td> 37.000000</td>\n",
       "      <td> 11658700</td>\n",
       "      <td> 37.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date       Open       High        Low      Close    Volume  \\\n",
       "1   2015-07-01  36.049999  36.110001  35.240002  35.400002  23624800   \n",
       "2   2015-06-30  34.500000  36.419998  34.439999  36.220001  25979100   \n",
       "7   2015-06-23  35.779999  36.200001  34.959999  35.369999  24814600   \n",
       "9   2015-06-19  34.970001  36.279999  34.849998  35.860001  32923200   \n",
       "14  2015-06-12  36.900002  37.250000  35.549999  35.900002  60739800   \n",
       "15  2015-06-11  35.919998  36.169998  35.790001  35.840000  11090800   \n",
       "16  2015-06-10  36.009998  36.169998  35.599998  35.849998  12611800   \n",
       "17  2015-06-09  36.500000  36.500000  35.570000  35.880001  13978300   \n",
       "18  2015-06-08  36.910000  36.980000  36.410000  36.459999  11718100   \n",
       "19  2015-06-05  36.790001  37.230000  36.650002  37.000000  11658700   \n",
       "\n",
       "    Adj Close  \n",
       "1   35.400002  \n",
       "2   36.220001  \n",
       "7   35.369999  \n",
       "9   35.860001  \n",
       "14  35.900002  \n",
       "15  35.840000  \n",
       "16  35.849998  \n",
       "17  35.880001  \n",
       "18  36.459999  \n",
       "19  37.000000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#if we want to find the days where the stock price high is greater than $36 per share, we can display it like so:\n",
    "snapshot[snapshot.High > 36]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td> 2015-06-08</td>\n",
       "      <td> 36.91</td>\n",
       "      <td> 36.98</td>\n",
       "      <td> 36.41</td>\n",
       "      <td> 36.459999</td>\n",
       "      <td> 11718100</td>\n",
       "      <td> 36.459999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date   Open   High    Low      Close    Volume  Adj Close\n",
       "18  2015-06-08  36.91  36.98  36.41  36.459999  11718100  36.459999"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We find the dates where the Low price is greater than $36 AND the Close price is less than $37\n",
    "snapshot[(snapshot.Low >= 36) & (snapshot.Close < 37)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>355</th>\n",
       "      <td> 2014-02-04</td>\n",
       "      <td> 66.250000</td>\n",
       "      <td> 66.370003</td>\n",
       "      <td> 64.500000</td>\n",
       "      <td> 66.320000</td>\n",
       "      <td> 13017400</td>\n",
       "      <td> 66.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>356</th>\n",
       "      <td> 2014-02-03</td>\n",
       "      <td> 65.919998</td>\n",
       "      <td> 66.480003</td>\n",
       "      <td> 64.209999</td>\n",
       "      <td> 65.250000</td>\n",
       "      <td> 17890300</td>\n",
       "      <td> 65.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354</th>\n",
       "      <td> 2014-02-05</td>\n",
       "      <td> 67.160004</td>\n",
       "      <td> 67.239998</td>\n",
       "      <td> 64.800003</td>\n",
       "      <td> 65.970001</td>\n",
       "      <td> 31504900</td>\n",
       "      <td> 65.970001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td> 2014-01-07</td>\n",
       "      <td> 67.669998</td>\n",
       "      <td> 67.730003</td>\n",
       "      <td> 61.389999</td>\n",
       "      <td> 61.459999</td>\n",
       "      <td> 31748400</td>\n",
       "      <td> 61.459999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td> 2014-01-03</td>\n",
       "      <td> 69.000000</td>\n",
       "      <td> 70.430000</td>\n",
       "      <td> 68.430000</td>\n",
       "      <td> 69.000000</td>\n",
       "      <td> 33207200</td>\n",
       "      <td> 69.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td> 2013-12-24</td>\n",
       "      <td> 66.339996</td>\n",
       "      <td> 70.870003</td>\n",
       "      <td> 65.559998</td>\n",
       "      <td> 69.959999</td>\n",
       "      <td> 35802700</td>\n",
       "      <td> 69.959999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td> 2013-12-27</td>\n",
       "      <td> 70.099998</td>\n",
       "      <td> 71.250000</td>\n",
       "      <td> 63.689999</td>\n",
       "      <td> 63.750000</td>\n",
       "      <td> 60418700</td>\n",
       "      <td> 63.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td> 2013-12-26</td>\n",
       "      <td> 72.879997</td>\n",
       "      <td> 74.730003</td>\n",
       "      <td> 69.129997</td>\n",
       "      <td> 73.309998</td>\n",
       "      <td> 82761100</td>\n",
       "      <td> 73.309998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date       Open       High        Low      Close    Volume  \\\n",
       "355  2014-02-04  66.250000  66.370003  64.500000  66.320000  13017400   \n",
       "356  2014-02-03  65.919998  66.480003  64.209999  65.250000  17890300   \n",
       "354  2014-02-05  67.160004  67.239998  64.800003  65.970001  31504900   \n",
       "374  2014-01-07  67.669998  67.730003  61.389999  61.459999  31748400   \n",
       "376  2014-01-03  69.000000  70.430000  68.430000  69.000000  33207200   \n",
       "382  2013-12-24  66.339996  70.870003  65.559998  69.959999  35802700   \n",
       "380  2013-12-27  70.099998  71.250000  63.689999  63.750000  60418700   \n",
       "381  2013-12-26  72.879997  74.730003  69.129997  73.309998  82761100   \n",
       "\n",
       "     Adj Close  \n",
       "355  66.320000  \n",
       "356  65.250000  \n",
       "354  65.970001  \n",
       "374  61.459999  \n",
       "376  69.000000  \n",
       "382  69.959999  \n",
       "380  63.750000  \n",
       "381  73.309998  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#shortening the twitter_data name\n",
    "t = twitter_data\n",
    "\n",
    "#find data where the Open price is higher than $65 and sort by Volume\n",
    "t[t.Open > 65].sort('Volume')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td> 415.000000</td>\n",
       "      <td> 415.000000</td>\n",
       "      <td> 415.000000</td>\n",
       "      <td> 415.000000</td>\n",
       "      <td> 4.150000e+02</td>\n",
       "      <td> 415.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>  45.009542</td>\n",
       "      <td>  45.873084</td>\n",
       "      <td>  44.066337</td>\n",
       "      <td>  44.920000</td>\n",
       "      <td> 2.266575e+07</td>\n",
       "      <td>  44.920000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>   8.373991</td>\n",
       "      <td>   8.613517</td>\n",
       "      <td>   8.109269</td>\n",
       "      <td>   8.368144</td>\n",
       "      <td> 1.646470e+07</td>\n",
       "      <td>   8.368144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>  30.940001</td>\n",
       "      <td>  31.200001</td>\n",
       "      <td>  29.510000</td>\n",
       "      <td>  30.500000</td>\n",
       "      <td> 4.107000e+06</td>\n",
       "      <td>  30.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>  38.024999</td>\n",
       "      <td>  38.695000</td>\n",
       "      <td>  37.355000</td>\n",
       "      <td>  37.840000</td>\n",
       "      <td> 1.309690e+07</td>\n",
       "      <td>  37.840000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>  43.660000</td>\n",
       "      <td>  44.580002</td>\n",
       "      <td>  42.509998</td>\n",
       "      <td>  43.470001</td>\n",
       "      <td> 1.867650e+07</td>\n",
       "      <td>  43.470001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>  51.019998</td>\n",
       "      <td>  51.875000</td>\n",
       "      <td>  50.084999</td>\n",
       "      <td>  50.825001</td>\n",
       "      <td> 2.641980e+07</td>\n",
       "      <td>  50.825001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>  72.879997</td>\n",
       "      <td>  74.730003</td>\n",
       "      <td>  69.129997</td>\n",
       "      <td>  73.309998</td>\n",
       "      <td> 1.347100e+08</td>\n",
       "      <td>  73.309998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Open        High         Low       Close        Volume  \\\n",
       "count  415.000000  415.000000  415.000000  415.000000  4.150000e+02   \n",
       "mean    45.009542   45.873084   44.066337   44.920000  2.266575e+07   \n",
       "std      8.373991    8.613517    8.109269    8.368144  1.646470e+07   \n",
       "min     30.940001   31.200001   29.510000   30.500000  4.107000e+06   \n",
       "25%     38.024999   38.695000   37.355000   37.840000  1.309690e+07   \n",
       "50%     43.660000   44.580002   42.509998   43.470001  1.867650e+07   \n",
       "75%     51.019998   51.875000   50.084999   50.825001  2.641980e+07   \n",
       "max     72.879997   74.730003   69.129997   73.309998  1.347100e+08   \n",
       "\n",
       "        Adj Close  \n",
       "count  415.000000  \n",
       "mean    44.920000  \n",
       "std      8.368144  \n",
       "min     30.500000  \n",
       "25%     37.840000  \n",
       "50%     43.470001  \n",
       "75%     50.825001  \n",
       "max     73.309998  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#basic statistics of our data\n",
    "t.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date       Open       High        Low      Close    Volume  \\\n",
      "0  2015-07-02  35.400002  35.970001  35.099998  35.720001  17589400   \n",
      "1  2015-07-01  36.049999  36.110001  35.240002  35.400002  23624800   \n",
      "2  2015-06-30  34.500000  36.419998  34.439999  36.220001  25979100   \n",
      "3  2015-06-29  34.470001  35.090000  34.150002  34.209999  25139700   \n",
      "4  2015-06-26  34.970001  35.330002  34.669998  35.259998  16900000   \n",
      "\n",
      "   Adj Close    Change  \n",
      "0  35.720001  2.478641  \n",
      "1  35.400002  2.468782  \n",
      "2  36.220001  5.749126  \n",
      "3  34.209999  2.752556  \n",
      "4  35.259998  1.903675  \n"
     ]
    }
   ],
   "source": [
    "#Add a column to calculate the percent change from the day's stock low to the day's stock high\n",
    "t[\"Change\"] = (t.High - t.Low)/t.Low * 100\n",
    "print t.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Open               45.009542\n",
       "High               45.873084\n",
       "Low                44.066337\n",
       "Close              44.920000\n",
       "Volume       22665748.433735\n",
       "Adj Close          44.920000\n",
       "Change              3.855658\n",
       "dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get mean for all columns in the twitter_data dataframe\n",
    "t.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Open               35.548501\n",
       "High               35.971500\n",
       "Low                35.041500\n",
       "Close              35.485000\n",
       "Volume       23126900.000000\n",
       "Adj Close          35.485000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get mean for all columns in the snapshot dataframe\n",
    "snapshot.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Date        Open        High         Low       Close   Volume  \\\n",
      "0   7/7/2015  208.679993  212.440002  203.610001  210.979996  2041600   \n",
      "1   7/6/2015  205.380005  209.850006  205.139999  209.449997  1398200   \n",
      "2   7/2/2015  208.000000  208.750000  207.059998  207.759995   790200   \n",
      "3   7/1/2015  208.869995  209.259995  206.339996  207.960007  1313500   \n",
      "4  6/30/2015  205.500000  209.089996  204.979996  206.630005  1591500   \n",
      "\n",
      "    Adj Close  \n",
      "0  210.979996  \n",
      "1  209.449997  \n",
      "2  207.759995  \n",
      "3  207.960007  \n",
      "4  206.630005  \n",
      "         Date        Open        High         Low       Close   Volume  \\\n",
      "247  1/8/2013  112.830002  113.000000  109.800003  111.169998  1252300   \n",
      "248  1/7/2013  112.220001  115.180000  111.750000  113.000000  1224900   \n",
      "249  1/4/2013  113.000000  113.400002  111.389999  113.150002  1128500   \n",
      "250  1/3/2013  112.320000  113.290001  111.120003  112.449997  1302200   \n",
      "251  1/2/2013  115.709999  116.330002  110.070000  112.650002  2562400   \n",
      "\n",
      "      Adj Close  \n",
      "247  111.169998  \n",
      "248  113.000000  \n",
      "249  113.150002  \n",
      "250  112.449997  \n",
      "251  112.650002  \n"
     ]
    }
   ],
   "source": [
    "#create three new dataframes from three separate csv files\n",
    "lnkd15_df = pd.read_csv(\"/Users/moor1204/Desktop/pandas_walkthrough/lnkd_hist2015.csv\", header=0)\n",
    "lnkd14_df = pd.read_csv(\"/Users/moor1204/Desktop/pandas_walkthrough/lnkd_hist2014.csv\", header=0)\n",
    "lnkd13_df = pd.read_csv(\"/Users/moor1204/Desktop/pandas_walkthrough/lnkd_hist2013.csv\", header=0)\n",
    "\n",
    "#combine dataframes into a single list\n",
    "frames = [lnkd15_df, lnkd14_df, lnkd13_df]\n",
    "\n",
    "#concatinate the list into a single dataframe\n",
    "lnkd_full = pd.concat(frames)\n",
    "\n",
    "#print the head and tail to make sure we combined the dataframes correctly\n",
    "print lnkd_full.head()\n",
    "print lnkd_full.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
